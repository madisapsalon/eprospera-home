name: EProspera Home - Test, Build, Push, Deploy to AWS

on:
    workflow_dispatch: {}
    push:
        branches:
            - main
permissions:
  contents: read
  id-token: write

env:
  AWS_REGION: eu-north-1
  ECR_REPOSITORY: eprospera-home
  AWS_ROLE_ARN: arn:aws:iam::386503254939:role/GitHub-Actions-ECR-Role
  ECS_CLUSTER: eprospera-home
  ECS_SERVICE: eprospera-home-td-service-q9yek5wx

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'

    - name: Install dependencies
      run: npm install

    - name: Run tests
      run: npm run test

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    env:
      IMAGE_TAG: ${{ github.sha }}
    steps:
    - uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ env.AWS_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      
    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        echo "Image pushed to $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
        echo "Image pushed to $ECR_REGISTRY/$ECR_REPOSITORY:latest"

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ env.AWS_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Force new deployment
      run: |
        aws ecs update-service --cluster ${{ env.ECS_CLUSTER }} \
                             --service ${{ env.ECS_SERVICE }} \
                             --force-new-deployment
    